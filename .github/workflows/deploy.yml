name: deploy

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install Dependencies
      run: npm ci

    - run: npm test
      env:
        CI: true

  build:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v2

    - name: Build image
      run: docker build --tag image .

    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/frontend-pwa

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag image $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
        IMAGE: docker.pkg.github.com/heritagemap/frontend-pwa/frontend-pwa
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script_stop: true
        envs: GITHUB_TOKEN,GITHUB_ACTOR,IMAGE
        script: |
          echo "$GITHUB_TOKEN" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

          docker pull $IMAGE:latest
          docker stop frontend-pwa || true
          docker rm frontend-pwa || true
          docker run -d --name frontend-pwa --network bridge $IMAGE:latest
